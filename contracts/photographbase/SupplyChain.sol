pragma solidity ^0.5.0;
// Define a contract 'Supplychain'
contract SupplyChain{
    // Define 'owner'
    address payable owner; 
    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint upc;
    // Define a public mapping 'photos' that maps the UPC to a Photo.
    mapping (uint => Photo) photos;
    // Define a public mapping 'photosHistory' that maps the UPC to an array of TxHash, 
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) photosHistory; 
    // Define enum 'State' with the following values:
    enum State{ 
        Taken,      // 0 
        Proccessed, // 1
        ForSale,    // 2
        Sold,       // 3
        Sent,       // 4 
        Received,   // 5
        Purchased   // 6
    }
    State constant defaultState = State.Taken;
    // Define a struct 'Photo' with the following fields:
    struct Photo {
        uint    upc; // Universal Product Code (UPC), generated by the Photographer, goes on the package, can be verified by the Customer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 7 stages
        address originPhotographerID; // Metamask-Ethereum address of the Photographer
        string  originPhotographerName; // Photographer Name
        string  photoNotes; // photo Notes
        uint    photoPrice; // photo Price
        State   photoState;  // photo State as represented in the enum above
        address editorID;  // Metamask-Ethereum address of the Editor
        address payable customerID; // Metamask-Ethereum address of the Customer
    }
    // Define 7 events with the same 7 state values and accept 'upc' as input argument
    event Taken(uint upc);
    event Proccessed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Sent(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);
    // Define a modifer that checks to see if msg.sender == owner of the contract
    modifier onlyOwner(){
        require(msg.sender == owner);
        _;
    }
    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address); 
        _;
    }
    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) { 
        require(msg.value >= _price); 
        _;
    } 
    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = photos[_upc].photoPrice;
        uint amountToReturn = msg.value - _price;
        photos[_upc].customerID.transfer(amountToReturn);
    }
    // Define a modifier that checks if an photo.state of a upc is Taken
    modifier taken(uint _upc) {
        require(photos[_upc].photoState == State.Taken);
        _;
    }
    // Define a modifier that checks if an photo.state of a upc is Processed
    modifier processed(uint _upc) {
        require(photos[_upc].photoState == State.Proccessed);
        _;
    }
    // Define a modifier that checks if an photo.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(photos[_upc].photoState == State.ForSale);
        _;
    }
    // Define a modifier that checks if an photo.state of a upc is Sold
    modifier sold(uint _upc) {
        require(photos[_upc].photoState == State.Sold);
        _;
    }
    // Define a modifier that checks if an photo.state of a upc is Sent
    modifier sent(uint _upc) {
        require(photos[_upc].photoState == State.Sent);
        _;
    }
    // Define a modifier that checks if an photo.state of a upc is Received
    modifier received(uint _upc) {
        require(photos[_upc].photoState == State.Received);
        _;
    }
    // Define a modifier that checks if an photo.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(photos[_upc].photoState == State.Purchased);
        _;
    }
    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'upc' to 1
    constructor() public payable {
        owner = msg.sender;
        upc = 1;
    }
    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == owner) {
        selfdestruct(owner);
        }
    }
    // Define a function 'takePhoto' that allows a photographer to mark a photo 'Taken'
    function takePhoto(uint _upc, address _originPhotographerID, string memory _originPhotographerName, string memory  _photoNotes) public 
    {
        // Add the new item as part of Harvest
        Photo memory newPhoto;
        newPhoto.upc = _upc;
        newPhoto.ownerID = msg.sender;
        newPhoto.originPhotographerID = _originPhotographerID;
        newPhoto.originPhotographerName = _originPhotographerName;
        newPhoto.photoNotes = _photoNotes;
        newPhoto.photoState = State.Taken;

        photos[_upc] = newPhoto;

        // Emit the appropriate event
        emit Taken(_upc);
        
    }
    // Define a function 'editPhoto' that allows an Editor to mark a photo 'Processed'
    function editPhoto(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    taken(_upc)
    // Call modifier to verify caller of this function
    verifyCaller (msg.sender)
    {
        // Update the appropriate fields
        Photo memory photo;
        photo = photos[_upc];
        photo.editorID = msg.sender;
        photo.photoState = State.Proccessed;
        
        // Emit the appropriate event
        emit Proccessed(_upc);
        
    }
    // Define a function 'addPhoto' that allows a photographer/ editor to mark a photo 'ForSale'
    function addPhoto(uint _upc, uint _price) public 
    // Call modifier to check if upc has passed previous supply chain stage
    processed(_upc)
    // Call modifier to verify caller of this function
    verifyCaller (msg.sender)
    {
        // Update the appropriate fields
        Photo memory photo;
        photo = photos[_upc];
        photo.photoState = State.ForSale;
        photo.photoPrice = _price;
        // Emit the appropriate event
        emit ForSale(_upc);
        
    }
    // Define a function 'buyPhoto' that allows the customer to mark a photo 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
    // and any excess ether sent is refunded back to the buyer
    function buyPhoto(uint _upc) public payable 
        // Call modifier to check if upc has passed previous supply chain stage
        forSale(_upc)
        // Call modifer to check if buyer has paid enough
        paidEnough(msg.value) 
        // Call modifer to send any excess ether back to buyer
        checkValue(_upc)
        {
        
        // Update the appropriate fields 
        Photo memory photo;
        photo = photos[_upc];
        //photo.ownerID = msg.sender;
        photo.customerID = msg.sender;
        photo.photoState = State.Sold;
        photo.ownerID = msg.sender;
        // Transfer money to photographer

        msg.sender.transfer(photo.photoPrice);
        
        // emit the appropriate event
        emit Sold(_upc);
        
    }
    // Define a function 'sendPhoto' that allows the photographer/ editor to mark an item 'Sent'
    // Use the above modifers to check if the photo is sold
    function sendPhoto(uint _upc) public 
        // Call modifier to check if upc has passed previous supply chain stage
        sold(_upc)
        // Call modifier to verify caller of this function
        verifyCaller(msg.sender)
        {
        // Update the appropriate fields
        Photo memory photo;
        photo = photos[_upc];
        photo.photoState = State.Sent;
        
        // Emit the appropriate event
        emit Sent(_upc);
        
    }
    // Define a function 'receivePhoto' that allows the customer to mark a photo 'Received'
    // Use the above modifiers to check if the photo is Sent
    function receivePhoto(uint _upc) public 
        // Call modifier to check if upc has passed previous supply chain stage
        sent(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
        {
        // Update the appropriate fields 

        Photo memory photo;
        photo = photos[_upc];
        photo.photoState = State.Received;
        
        
        // Emit the appropriate event
        emit Received(_upc);
        
    }
    // Define a function 'purchasePhoto' that allows the customer to mark a photo 'Purchased'
    // Use the above modifiers to check if the photo is received
    function purchasePhoto(uint _upc) public 
        // Call modifier to check if upc has passed previous supply chain stage
        received(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
        {
        // Update the appropriate fields 
        Photo memory photo;
        photo = photos[_upc];
        photo.photoState = State.Purchased;
        
        // Emit the appropriate event
        emit Purchased(_upc);
        
    }
    // Define a function 'fetchPhotoBufferOne' that fetches the data
    function fetchPhotoBufferOne(uint _upc) public view returns 
    (uint photoUPC, address ownerID, address originPhotographerID, string memory originPhotographerName){
    // Assign values 
    photoUPC                = photos[_upc].upc;
    ownerID                 = photos[_upc].ownerID;
    originPhotographerID    = photos[_upc].originPhotographerID;
    originPhotographerName  = photos[_upc].originPhotographerName;
       
    return(photoUPC, ownerID, originPhotographerID, originPhotographerName);
    }
  // Define a function 'fetchPhotoBufferTwo' that fetches the data
    function fetchPhotoBufferTwo(uint _upc) public view returns 
    (uint photoUPC, string memory photoNotes, uint photoPrice, State photoState, address editorID, address customerID){
    // Assign values to the 8 parameters
    photoUPC = photos[_upc].upc;
    photoNotes = photos[_upc].photoNotes;
    photoPrice = photos[_upc].photoPrice;
    photoState = photos[_upc].photoState;
    editorID = photos[_upc].editorID;
    customerID = photos[_upc].customerID;
        
    return (photoUPC, photoNotes, photoPrice, photoState, editorID, customerID);
    }

}
