// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
//const truffleAssert = require('truffle-assertions')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var upc = 1
    const ownerID = accounts[0]
    const originPhotographerID = accounts[1]
    const originPhotographerName = "Hadeel Alsini"
    const photoNotes = "Photo was taken with a love."
    var n = 1
    const photoPrice = web3.utils.toWei(n.toString(), "ether")
    var photoState = 0
    const editorID = accounts[2]
    const customerID = accounts[3]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Photographer: accounts[1] ", accounts[1])
    console.log("Editor: accounts[2] ", accounts[2])
    console.log("Customer: accounts[3] ", accounts[3])

    // 1st Test
    it("Testing smart contract function takePhoto() that allows a photographer to take a photo", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
         // Watch the emitted event Taken()
        var event = supplyChain.Taken(upc)
        await supplyChain.Taken((err, res) => {
            eventEmitted = true
        })

        // Mark a photo as Taken by calling function takePhoto()
        await supplyChain.takePhoto(upc, originPhotographerID, originPhotographerName, photoNotes,{from: ownerID})

        // Retrieve the just now saved item from blockchain by calling function fetchPhoto()
        const resultBufferOne = await supplyChain.fetchPhotoBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchPhotoBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferOne[1], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[2], originPhotographerID, 'Error: Missing or Invalid originPhotographerID')
        assert.equal(resultBufferOne[3], originPhotographerName, 'Error: Missing or Invalid originPhotographerName')
        assert.equal(resultBufferTwo[3], photoState, 'Error: Invalid photo State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function editPhoto() that allows aa editor to edit the photo", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
/*         var event = supplyChain.Proccessed(upc);
        event.watch((err, res) => {
            console.log("RES: "+res); // event response
            // Do something on event;
            event.stopWatching() // Stop watching for the event once you've done what you wanted to do.
        });
 */
        // Watch the emitted event Processed()
        var event = supplyChain.Proccessed(upc)
        await supplyChain.Proccessed((err, res) => {
            eventEmitted = true
        })
        // Mark an item as Processed by calling function editPhoto()
        await supplyChain.editPhoto(upc, {from: editorID})
        console.log("editorID used: "+ editorID)
        photoState = photoState + 1

        // Retrieve the just now saved photo from blockchain by calling function fetchPhoto()
        const resultBufferOne = await supplyChain.fetchPhotoBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchPhotoBufferTwo.call(upc)
        
        // Verify the result set
        assert.equal(resultBufferOne[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferOne[1], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[2], originPhotographerID, 'Error: Missing or Invalid originPhotographerID')
        assert.equal(resultBufferOne[3], originPhotographerName, 'Error: Missing or Invalid originPhotographerName')
        
        assert.equal(resultBufferTwo[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferTwo[1], photoNotes, 'Error: Missing or Invalid photoNotes')
        console.log("resultBufferTwo[3]: "+resultBufferTwo[3])
        assert.equal(resultBufferTwo[3], photoState, 'Error: Missing or Invalid photoState')
        assert.equal(resultBufferTwo[4], editorID, 'Error: Missing or Invalid editorID')
        
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })    

    // 3rd Test
    it("Testing smart contract function addPhoto() that allows a photographer to add the photo for sale", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale(upc)
        await supplyChain.ForSale((err, res) => {
            eventEmitted = true
            photoState ++; 
        })

        // Mark a photo as ForSale by calling function addPhoto()
        await supplyChain.addPhoto(upc, photoPrice, {from: originPhotographerID})

        // Retrieve the just now saved photo from blockchain by calling function fetchPoto()
        const resultBufferOne = await supplyChain.fetchPhotoBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchPhotoBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferOne[1], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[2], originPhotographerID, 'Error: Missing or Invalid originPhotographerID')
        assert.equal(resultBufferOne[3], originPhotographerName, 'Error: Missing or Invalid originPhotographerName')
        
        assert.equal(resultBufferTwo[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferTwo[1], photoNotes, 'Error: Missing or Invalid photoNotes')
        assert.equal(resultBufferTwo[2], photoPrice, 'Error: Missing or Invalid photoPrice')
        assert.equal(resultBufferTwo[3], photoState, 'Error: Missing or Invalid photoState')
        assert.equal(resultBufferTwo[4], editorID, 'Error: Missing or Invalid editorID')
        //assert.equal(resultBufferTwo[5], customerID, 'Error: Missing or Invalid customerID')
        
        assert.equal(eventEmitted, true, 'Invalid event emitted')
          
    })    

    // 4th Test
    it("Testing smart contract function buyPhoto() that allows a customer to buy photo", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        var event = supplyChain.Soldupc(upc)
        await supplyChain.Sold((err, res) => {
            eventEmitted = true
            photoState ++; 
        })

        // Mark a photo as Sold by calling function buyPhoto()
        await supplyChain.buyPhoto(upc, {from: customerID})

        // Retrieve the just now saved item from blockchain by calling function fetchPhoto()
        const resultBufferOne = await supplyChain.fetchPhotoBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchPhotoBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferOne[1], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[2], originPhotographerID, 'Error: Missing or Invalid originPhotographerID')
        assert.equal(resultBufferOne[3], originPhotographerName, 'Error: Missing or Invalid originPhotographerName')
        
        assert.equal(resultBufferTwo[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferTwo[1], photoNotes, 'Error: Missing or Invalid photoNotes')
        assert.equal(resultBufferTwo[2], photoPrice, 'Error: Missing or Invalid photoPrice')
        assert.equal(resultBufferTwo[3], photoState, 'Error: Missing or Invalid photoState')
        assert.equal(resultBufferTwo[4], editorID, 'Error: Missing or Invalid editorID')
        assert.equal(resultBufferTwo[5], customerID, 'Error: Missing or Invalid customerID')
        
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })    

    // 5th Test
    it("Testing smart contract function sendPhoto() that allows a photographer to send a photo", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sent()
        var event = supplyChain.Sent(upc, {from: originPhotographerID})
        await supplyChain.Sent((err, res) => {
            eventEmitted = true
            photoState ++; 
        })

        // Mark a photo as Sold by calling function sendPhoto()
        await supplyChain.sendPhoto(upc)

        // Retrieve the just now saved photo from blockchain by calling function fetchPhoto()
        const resultBufferOne = await supplyChain.fetchPhotoBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchPhotoBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferOne[1], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[2], originPhotographerID, 'Error: Missing or Invalid originPhotographerID')
        assert.equal(resultBufferOne[3], originPhotographerName, 'Error: Missing or Invalid originPhotographerName')
        
        assert.equal(resultBufferTwo[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferTwo[1], photoNotes, 'Error: Missing or Invalid photoNotes')
        assert.equal(resultBufferTwo[2], photoPrice, 'Error: Missing or Invalid photoPrice')
        assert.equal(resultBufferTwo[3], photoState, 'Error: Missing or Invalid photoState')
        assert.equal(resultBufferTwo[4], editorID, 'Error: Missing or Invalid editorID')
        assert.equal(resultBufferTwo[5], customerID, 'Error: Missing or Invalid customerID')
        
        assert.equal(eventEmitted, true, 'Invalid event emitted')
              
    })    

    // 6th Test
    it("Testing smart contract function receivePhoto() that allows a customer to mark photo received", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.Received(upc)
        await supplyChain.Received((err, res) => {
            eventEmitted = true
            photoState ++; 
        })

        // Mark a photo as Sold by calling function sendPhoto()
        await supplyChain.receivePhoto(upc, {from: customerID})

        // Retrieve the just now saved photo from blockchain by calling function fetchPhoto()
        const resultBufferOne = await supplyChain.fetchPhotoBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchPhotoBufferTwo.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferOne[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferOne[1], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[2], originPhotographerID, 'Error: Missing or Invalid originPhotographerID')
        assert.equal(resultBufferOne[3], originPhotographerName, 'Error: Missing or Invalid originPhotographerName')
        
        assert.equal(resultBufferTwo[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferTwo[1], photoNotes, 'Error: Missing or Invalid photoNotes')
        assert.equal(resultBufferTwo[2], photoPrice, 'Error: Missing or Invalid photoPrice')
        assert.equal(resultBufferTwo[3], photoState, 'Error: Missing or Invalid photoState')
        assert.equal(resultBufferTwo[4], editorID, 'Error: Missing or Invalid editorID')
        assert.equal(resultBufferTwo[5], customerID, 'Error: Missing or Invalid customerID')

        assert.equal(eventEmitted, true, 'Invalid event emitted')
             
    })    

    // 7th Test
    it("Testing smart contract function purchasePhoto() that allows a customer to purchase photo", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased(upc)
        await supplyChain.Purchased((err, res) => {
            eventEmitted = true
            photoState ++; 
        })

        // Mark a photo as Sold by calling function sendPhoto()
        await supplyChain.purchasePhoto(upc, {from: customerID})

        // Retrieve the just now saved photo from blockchain by calling function fetchPhoto()
        const resultBufferOne = await supplyChain.fetchPhotoBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchPhotoBufferTwo.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferOne[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferOne[1], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[2], originPhotographerID, 'Error: Missing or Invalid originPhotographerID')
        assert.equal(resultBufferOne[3], originPhotographerName, 'Error: Missing or Invalid originPhotographerName')
        
        assert.equal(resultBufferTwo[0], upc, 'Error: Invalid photo UPC')
        assert.equal(resultBufferTwo[1], photoNotes, 'Error: Missing or Invalid photoNotes')
        assert.equal(resultBufferTwo[2], photoPrice, 'Error: Missing or Invalid photoPrice')
        assert.equal(resultBufferTwo[3], photoState, 'Error: Missing or Invalid photoState')
        assert.equal(resultBufferTwo[4], editorID, 'Error: Missing or Invalid editorID')
        assert.equal(resultBufferTwo[5], customerID, 'Error: Missing or Invalid customerID')
        
        assert.equal(eventEmitted, true, 'Invalid event emitted')
        
    })    
 
});

